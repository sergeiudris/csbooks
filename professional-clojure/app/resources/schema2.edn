[
 
 {:db/ident :task.status/todo
  :label "To Do"}

 {:db/ident :task.status/in-progress
  :label "In Progress"}

 {:db/ident :task.status/done
  :label "Done"}

 
 {:db/id #db/id[:db.part/account]
  :db/ident :account.type/free
  :label "Free account"}
 
 {db/id #db/id[:db.part/account]
  :db/ident :account.type/paid
  :label "Paid account"}
 

 {:db/id #db/id[:db.part/account]
  :db/ident :transaction.type/charge
  :label "Charge"}

 {:db/id #db/id[:db.part/account]
  :db/ident :transaction.type/payment
  :label "Payment"}

 {:db/id #db/id[:db.part/account]
  :db/ident :transaction.type/adjustment
  :label "Adjustment"}
 
 
 {:db/id #db/id[:db.part/task]
  :db/ident :add-identity
  :db/fn #db/fn{:lang "clojure"
                :params [db e ident-attr value]
                :code "(if (d/entity db [ident-attr value])
 (throw (ex-info (str value \" already exists for \"
 ident-attr)
 {:e e
 :attribute ident-attr
 :value value}))
 [[:db/add e ident-attr value]])"}}

 
 [{:db/id #db/id[:db.part/account]
   :db/ident :account/update-balance
   :db/fn #db/fn{:lang "clojure"
                 :params [db a amt]
                 :code "(let [acct (d/entity db a) 
balance (or (:account/current-balance acct) 0)]
 [[:db/add a :account/current-balance
 (bigdec (+ balance amt))]])"}}
  ]
 

 ]